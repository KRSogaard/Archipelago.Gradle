buildscript {
    ext {
        springBootVersion = '2.2.6.RELEASE'
    }

    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'com.palantir.docker' version '0.26.0'
    id 'com.palantir.docker-compose' version '0.26.0'
}

repositories {
    jcenter()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven {
        name = "Local dynamodb Repo"
        //Local DynamoDB repository
        url "https://s3-us-west-2.amazonaws.com/dynamodb-local/release"
    }
    maven {
        name = "Wewelo Repo"
        url "http://repo.wewelo.com/release"
    }
}

apply plugin: 'maven'
apply plugin: 'java-library'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'com.palantir.docker'
apply plugin: 'com.palantir.docker-compose'

group "build.archipelago"
version "1.0"
sourceCompatibility = 11
targetCompatibility = 11
mainClassName = 'build.archipelago.authservice.AuthServiceApplication'

sourceSets {
    main.java.srcDirs = ['src']
    main.resources.srcDirs = ['resources']
    test.java.srcDirs = ['tst']
    test.resources.srcDirs = ['tst/resources']
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

dependencies {
    api "build.archipelago:auth-service-models:1.0"
    api "build.archipelago:auth-service-client:1.0"
    api "build.archipelago:common-dynamodb:1.0"
    api "build.archipelago:common-rest:1.0"
    api "build.archipelago:common:1.0"

    compile 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtime 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtime 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    implementation 'org.slf4j:slf4j-api:1.7.30'


    // Google Guava
    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'org.apache.commons:commons-lang3:3.0'

    // Lombok
    compile 'org.projectlombok:lombok:1.18.12'  // utilities for POJOs
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.11.880'

    // Test framework
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.+'
    testImplementation 'commons-io:commons-io:2.6'
    testImplementation "org.assertj:assertj-core:3.18.1"
    testImplementation 'com.google.code.gson:gson:2.8.6'
    testImplementation 'net.dongliu:gson-java8-datatype:1.1.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // Needed for DynamoDBLocal
    testImplementation 'com.amazonaws:DynamoDBLocal:1.12.0'
    testImplementation 'com.almworks.sqlite4java:sqlite4java:1.0.392'

    // name for docker-compose
    docker "${group}:${project.name}:${version}"
}

task runlocal {
    run.configure {
        project.logger.lifecycle("======================================")
        project.logger.lifecycle("= Running application in local stage =")
        project.logger.lifecycle("======================================")
        systemProperty "spring.profiles.active", 'local'
    }
}
runlocal.finalizedBy run

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

docker {
    dockerfile file('resources/docker/Dockerfile')
    files project.tasks.bootJar.outputs
    copySpec.into("/opt")
    noCache true
    name "${project.group}/${project.name}:latest"
    buildArgs([
            APP_JAR_NAME: "${project.tasks.bootJar.archiveFileName.get()}" ,
    ])
}

dockerCompose {
    template "resources/docker/docker-compose.template.yml"
    templateTokens([
            'service.image': "${project.group}/${project.name}:latest",
            'service.name': project.name
    ])
    dockerComposeFile "$buildDir/docker/docker-compose.yml"
}
